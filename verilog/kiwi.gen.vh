// this file auto-generated by the e_cpu assembler -- edits will be overwritten

// from assembler DEF directives:

	localparam NUM_CMDS_OTHER = 0;    // DEFp 0x0
//`define DEF_NUM_CMDS_OTHER
`define USE_SDR 1    // DEFh 0x1
//`define USE_24K_WIDE    // DEFh 0x0
`define USE_GPS 1    // DEFh 0x1
`define ARTIX_7A35 1    // DEFh 0x1
//`define ZYNQ_7007    // DEFh 0x0
	localparam ADC_BITS = 14;    // DEFp 0xe
`define DEF_ADC_BITS 1
	localparam DEFAULT_NSYNC = 2;    // DEFp 0x2
`define DEF_DEFAULT_NSYNC 1
`define USE_OPTIONAL 1    // DEFh 0x1
//`define USE_WB    // DEFh 0x0
`define USE_RX_CICF 1    // DEFh 0x1
`define USE_LOGGER 1    // DEFh 0x1
`define USE_CPU_CTR 1    // DEFh 0x1
`define USE_GEN 1    // DEFh 0x1
`define USE_DEBUG 1    // DEFh 0x1
//`define USE_RX_SEQ    // DEFh 0x0
`define USE_VIVADO 1    // DEFh 0x1
`define SERIES_7 1    // DEFh 0x1
//`define SPI_PUMP_CHECK    // DEFh 0x0
//`define STACK_CHECK    // DEFh 0x0
//`define SND_SEQ_CHECK    // DEFh 0x0
//`define SND_TIMING_CK    // DEFh 0x0
	localparam FPGA_ID_RX4_WF4 = 3'd5;    // DEFp 0x5
`define DEF_FPGA_ID_RX4_WF4 1
	localparam FPGA_ID_RX8_WF2 = 3'd3;    // DEFp 0x3
`define DEF_FPGA_ID_RX8_WF2 1
	localparam FPGA_ID_RX3_WF3 = 3'd4;    // DEFp 0x4
`define DEF_FPGA_ID_RX3_WF3 1
	localparam FPGA_ID_RX14_WF0 = 3'd2;    // DEFp 0x2
`define DEF_FPGA_ID_RX14_WF0 1
	localparam FPGA_ID_WB = 3'd1;    // DEFp 0x1
`define DEF_FPGA_ID_WB 1
	localparam FPGA_ID_OTHER = 3'd0;    // DEFp 0x0
//`define DEF_FPGA_ID_OTHER
	localparam NUM_CMDS_BASE = 13;    // DEFp 0xd
`define DEF_NUM_CMDS_BASE 1
	localparam NUM_CMDS_SDR = 15;    // DEFp 0xf
`define DEF_NUM_CMDS_SDR 1
	localparam NUM_CMDS_GPS = 17;    // DEFp 0x11
`define DEF_NUM_CMDS_GPS 1
	localparam NUM_CMDS = 45;    // DEFp 0x2d
`define DEF_NUM_CMDS 1
`define SPI_32 1    // DEFh 0x1
	localparam SPIBUF_W = 2048;    // DEFp 0x800
`define DEF_SPIBUF_W 1
	localparam SPIBUF_WA = 2046;    // DEFp 0x7fe
`define DEF_SPIBUF_WA 1
	localparam SPIBUF_B = 4096;    // DEFp 0x1000
`define DEF_SPIBUF_B 1
	localparam N_SND_RATES = 2;    // DEFp 0x2
`define DEF_N_SND_RATES 1
	localparam SND_RATE_WB = 12000;    // DEFp 0x2ee0
`define DEF_SND_RATE_WB 1
	localparam SND_RATE_WB_I = 0;    // DEFp 0x0
//`define DEF_SND_RATE_WB_I
	localparam RX1_WB_DECIM = 926;    // DEFp 0x39e
`define DEF_RX1_WB_DECIM 1
	localparam RX2_WB_DECIM = 3;    // DEFp 0x3
`define DEF_RX2_WB_DECIM 1
	localparam RX1_WIDE_DECIM = 823;    // DEFp 0x337
`define DEF_RX1_WIDE_DECIM 1
	localparam RX2_WIDE_DECIM = 2;    // DEFp 0x2
`define DEF_RX2_WIDE_DECIM 1
	localparam RX1_STD_DECIM = 926;    // DEFp 0x39e
`define DEF_RX1_STD_DECIM 1
	localparam RX2_STD_DECIM = 3;    // DEFp 0x3
`define DEF_RX2_STD_DECIM 1
`define CICF_DECIM_BY_2 1    // DEFh 0x2
	localparam MAX_SND_RATE = 20250;    // DEFp 0x4f1a
`define DEF_MAX_SND_RATE 1
	localparam SND_RATE_3CH = 20250;    // DEFp 0x4f1a
`define DEF_SND_RATE_3CH 1
	localparam SND_RATE_3CH_I = 1;    // DEFp 0x1
`define DEF_SND_RATE_3CH_I 1
	localparam MIN_SND_RATE = 12000;    // DEFp 0x2ee0
`define DEF_MIN_SND_RATE 1
	localparam SND_RATE_4CH = 12000;    // DEFp 0x2ee0
`define DEF_SND_RATE_4CH 1
	localparam SND_RATE_4CH_I = 0;    // DEFp 0x0
//`define DEF_SND_RATE_4CH_I
	localparam SND_RATE_8CH = 12000;    // DEFp 0x2ee0
`define DEF_SND_RATE_8CH 1
	localparam SND_RATE_8CH_I = 0;    // DEFp 0x0
//`define DEF_SND_RATE_8CH_I
	localparam SND_RATE_14CH = 12000;    // DEFp 0x2ee0
`define DEF_SND_RATE_14CH 1
	localparam SND_RATE_14CH_I = 0;    // DEFp 0x0
//`define DEF_SND_RATE_14CH_I
	localparam RX_DECIM_3CH = 3292;    // DEFp 0xcdc
`define DEF_RX_DECIM_3CH 1
	localparam RX_DECIM_4CH = 5556;    // DEFp 0x15b4
`define DEF_RX_DECIM_4CH 1
	localparam RX_DECIM_8CH = 5556;    // DEFp 0x15b4
`define DEF_RX_DECIM_8CH 1
	localparam RX_DECIM_14CH = 5556;    // DEFp 0x15b4
`define DEF_RX_DECIM_14CH 1
	localparam RX_DECIM_WB = 5556;    // DEFp 0x15b4
`define DEF_RX_DECIM_WB 1
	localparam RXBUF_SIZE_44 = 8192;    // DEFp 0x2000
`define DEF_RXBUF_SIZE_44 1
	localparam RXBUF_SIZE_33 = 16384;    // DEFp 0x4000
`define DEF_RXBUF_SIZE_33 1
	localparam RXBUF_SIZE_82 = 16384;    // DEFp 0x4000
`define DEF_RXBUF_SIZE_82 1
	localparam RXBUF_SIZE_14 = 32768;    // DEFp 0x8000
`define DEF_RXBUF_SIZE_14 1
	localparam RXBUF_SIZE_WB = 32768;    // DEFp 0x8000
`define DEF_RXBUF_SIZE_WB 1
	localparam RXBUF_LARGE_44 = 0;    // DEFp 0x0
//`define DEF_RXBUF_LARGE_44
	localparam RXBUF_LARGE_33 = 1;    // DEFp 0x1
`define DEF_RXBUF_LARGE_33 1
	localparam RXBUF_LARGE_82 = 1;    // DEFp 0x1
`define DEF_RXBUF_LARGE_82 1
	localparam RXBUF_LARGE_14 = 2;    // DEFp 0x2
`define DEF_RXBUF_LARGE_14 1
	localparam RXBUF_LARGE_WB = 2;    // DEFp 0x2
`define DEF_RXBUF_LARGE_WB 1
//`define USE_RX_CIC24    // DEFh 0x0
	localparam RX1_BITS = 22;    // DEFp 0x16
`define DEF_RX1_BITS 1
	localparam RX2_BITS = 18;    // DEFp 0x12
`define DEF_RX2_BITS 1
	localparam RXO_BITS = 24;    // DEFp 0x18
`define DEF_RXO_BITS 1
	localparam RX1_STAGES = 3;    // DEFp 0x3
`define DEF_RX1_STAGES 1
	localparam RX2_STAGES = 5;    // DEFp 0x5
`define DEF_RX2_STAGES 1
`define USE_WF_CIC24 1    // DEFh 0x1
//`define USE_WF_MEM24    // DEFh 0x0
	localparam WF1_STAGES = 5;    // DEFp 0x5
`define DEF_WF1_STAGES 1
	localparam WF2_STAGES = 5;    // DEFp 0x5
`define DEF_WF2_STAGES 1
	localparam WF1_BITS = 24;    // DEFp 0x18
`define DEF_WF1_BITS 1
	localparam WF2_BITS = 24;    // DEFp 0x18
`define DEF_WF2_BITS 1
	localparam WFO_BITS = 16;    // DEFp 0x10
`define DEF_WFO_BITS 1
	localparam WF_1CIC_MAXD = 8192;    // DEFp 0x2000
`define DEF_WF_1CIC_MAXD 1
	localparam WF_2CIC_MAXD = 0;    // DEFp 0x0
//`define DEF_WF_2CIC_MAXD
	localparam GPS_MAX_CHANS = 12;    // DEFp 0xc
`define DEF_GPS_MAX_CHANS 1
	localparam GPS_RX14_CHANS = 10;    // DEFp 0xa
`define DEF_GPS_RX14_CHANS 1
	localparam GPS_INTEG_BITS = 20;    // DEFp 0x14
`define DEF_GPS_INTEG_BITS 1
	localparam GPS_REPL_BITS = 18;    // DEFp 0x12
`define DEF_GPS_REPL_BITS 1
	localparam MAX_NAV_BITS = 128;    // DEFp 0x80
`define DEF_MAX_NAV_BITS 1
	localparam GPS_RPT = 32;    // DEFp 0x20
`define DEF_GPS_RPT 1
	localparam GPS_SAMPS = 2044;    // DEFp 0x7fc
`define DEF_GPS_SAMPS 1
	localparam GPS_IQ_SAMPS = 255;    // DEFp 0xff
`define DEF_GPS_IQ_SAMPS 1
	localparam GPS_IQ_SAMPS_W = 1020;    // DEFp 0x3fc
`define DEF_GPS_IQ_SAMPS_W 1
	localparam L1_CODEBITS = 10;    // DEFp 0xa
`define DEF_L1_CODEBITS 1
	localparam L1_CODELEN = 1023;    // DEFp 0x3ff
`define DEF_L1_CODELEN 1
	localparam E1B_MODE = 2048;    // DEFp 0x800
`define DEF_E1B_MODE 1
	localparam E1B_CODEBITS = 12;    // DEFp 0xc
`define DEF_E1B_CODEBITS 1
	localparam E1B_CODELEN = 4092;    // DEFp 0xffc
`define DEF_E1B_CODELEN 1
	localparam E1B_CODE_XFERS = 2;    // DEFp 0x2
`define DEF_E1B_CODE_XFERS 1
	localparam E1B_CODE_LOOP = 2044;    // DEFp 0x7fc
`define DEF_E1B_CODE_LOOP 1
	localparam GET_CHAN_IQ = 0;    // DEFb: bit number for value: 0x1
	localparam GET_SRQ = 1;    // DEFb: bit number for value: 0x2
	localparam GET_SNAPSHOT = 2;    // DEFb: bit number for value: 0x4
	localparam HOST_RX = 3;    // DEFb: bit number for value: 0x8
	localparam GET_RX_SRQ = 4;    // DEFb: bit number for value: 0x10
	localparam GET_REG_NO = 192;    // DEFp 0xc0
`define DEF_GET_REG_NO 1
	localparam REG_0 = 0;    // DEFp 0x0
//`define DEF_REG_0
	localparam REG_1 = 64;    // DEFp 0x40
`define DEF_REG_1 1
	localparam REG_2 = 128;    // DEFp 0x80
`define DEF_REG_2 1
	localparam REG_3 = 192;    // DEFp 0xc0
`define DEF_REG_3 1
	localparam GET_REG_MISC = 8;    // DEFb: bit number for value: 0x100
	localparam GET_STATUS = 256;    // DEFp 0x100
`define DEF_GET_STATUS 1
	localparam GET_CPU_CTR = 9;    // DEFb: bit number for value: 0x200
	localparam GET_CPU_CTR0 = 512;    // DEFp 0x200
`define DEF_GET_CPU_CTR0 1
	localparam GET_CPU_CTR1 = 576;    // DEFp 0x240
`define DEF_GET_CPU_CTR1 1
	localparam GET_CPU_CTR2 = 640;    // DEFp 0x280
`define DEF_GET_CPU_CTR2 1
	localparam GET_CPU_CTR3 = 704;    // DEFp 0x2c0
`define DEF_GET_CPU_CTR3 1
	localparam GET_ADC_CTR = 10;    // DEFb: bit number for value: 0x400
	localparam GET_ADC_CTR0 = 1024;    // DEFp 0x400
`define DEF_GET_ADC_CTR0 1
	localparam GET_ADC_CTR1 = 1088;    // DEFp 0x440
`define DEF_GET_ADC_CTR1 1
	localparam HOST_TX = 0;    // DEFb: bit number for value: 0x1
	localparam SET_GPS_MASK = 1;    // DEFb: bit number for value: 0x2
	localparam SET_GPS_CHAN = 2;    // DEFb: bit number for value: 0x4
	localparam SET_CG_NCO = 3;    // DEFb: bit number for value: 0x8
	localparam SET_LO_NCO = 4;    // DEFb: bit number for value: 0x10
	localparam SET_SAT = 5;    // DEFb: bit number for value: 0x20
	localparam SET_E1B_CODE = 6;    // DEFb: bit number for value: 0x40
	localparam SET_PAUSE = 7;    // DEFb: bit number for value: 0x80
	localparam SET_ADC_LVL = 8;    // DEFb: bit number for value: 0x100
	localparam SET_CNT_MASK = 9;    // DEFb: bit number for value: 0x200
	localparam SET_CTRL = 10;    // DEFb: bit number for value: 0x400
	localparam SET_REG = 3;    // DEFb: bit number for value: 0x8
	localparam SET_REG_NO = 7;    // DEFp 0x7
`define DEF_SET_REG_NO 1
	localparam SET_WF_CHAN = 0;    // DEFp 0x0
//`define DEF_SET_WF_CHAN
	localparam SET_WF_FREQ = 1;    // DEFp 0x1
`define DEF_SET_WF_FREQ 1
	localparam SET_WF_DECIM = 2;    // DEFp 0x2
`define DEF_SET_WF_DECIM 1
	localparam SET_WF_OFFSET = 3;    // DEFp 0x3
`define DEF_SET_WF_OFFSET 1
	localparam SET_WF_RST = 4;    // DEFp 0x4
`define DEF_SET_WF_RST 1
	localparam SET_REG_5 = 5;    // DEFp 0x5
`define DEF_SET_REG_5 1
	localparam SET_REG_6 = 6;    // DEFp 0x6
`define DEF_SET_REG_6 1
	localparam SET_REG_7 = 7;    // DEFp 0x7
`define DEF_SET_REG_7 1
	localparam SET_RX_CHAN = 4;    // DEFb: bit number for value: 0x10
	localparam SET_RX_FREQ = 5;    // DEFb: bit number for value: 0x20
	localparam FREQ_L = 6;    // DEFb: bit number for value: 0x40
	localparam SET_RX_NSAMPS = 7;    // DEFb: bit number for value: 0x80
	localparam SET_GEN_FREQ = 9;    // DEFb: bit number for value: 0x200
	localparam SET_GEN_ATTN = 10;    // DEFb: bit number for value: 0x400
	localparam HOST_RST = 0;    // DEFb: bit number for value: 0x1
	localparam HOST_RDY = 1;    // DEFb: bit number for value: 0x2
	localparam GET_MEMORY = 2;    // DEFb: bit number for value: 0x4
	localparam GPS_SAMPLER_RST = 3;    // DEFb: bit number for value: 0x8
	localparam GET_GPS_SAMPLES = 4;    // DEFb: bit number for value: 0x10
	localparam GET_LOG = 5;    // DEFb: bit number for value: 0x20
	localparam PUT_LOG = 6;    // DEFb: bit number for value: 0x40
	localparam LOG_RST = 7;    // DEFb: bit number for value: 0x80
	localparam WREVT_100 = 8;    // DEFb: bit number for value: 0x100
	localparam WREVT_200 = 9;    // DEFb: bit number for value: 0x200
	localparam WREVT_400 = 10;    // DEFb: bit number for value: 0x400
	localparam GET_RX_SAMP = 0;    // DEFb: bit number for value: 0x1
	localparam RX_BUFFER_RST = 1;    // DEFb: bit number for value: 0x2
	localparam RX_GET_BUF_CTR = 2;    // DEFb: bit number for value: 0x4
	localparam WREVT2_008 = 3;    // DEFb: bit number for value: 0x8
	localparam GET_WF_SAMP_I = 4;    // DEFb: bit number for value: 0x10
	localparam GET_WF_SAMP_Q = 5;    // DEFb: bit number for value: 0x20
	localparam CLR_RX_OVFL = 6;    // DEFb: bit number for value: 0x40
	localparam FREEZE_TOS = 7;    // DEFb: bit number for value: 0x80
	localparam CPU_CTR_CLR = 8;    // DEFb: bit number for value: 0x100
	localparam CPU_CTR_ENA = 9;    // DEFb: bit number for value: 0x200
	localparam CPU_CTR_DIS = 10;    // DEFb: bit number for value: 0x400
	localparam WREVTL_LOOP_CTR0 = 0;    // DEFp 0x0
//`define DEF_WREVTL_LOOP_CTR0
	localparam WREVTL_LOOP_CTR1 = 1;    // DEFp 0x1
`define DEF_WREVTL_LOOP_CTR1 1
	localparam GET_MEMORY_LOOP = 1;    // DEFb: bit number for value: 0x2
	localparam GET_RX_SAMP_LOOP = 2;    // DEFb: bit number for value: 0x4
	localparam GET_WF_SAMP_Q_LOOP = 3;    // DEFb: bit number for value: 0x8
	localparam GET_GPS_SAMPS_LOOP = 4;    // DEFb: bit number for value: 0x10
	localparam WREVTL_020 = 5;    // DEFb: bit number for value: 0x20
	localparam WREVTL_040 = 6;    // DEFb: bit number for value: 0x40
	localparam WREVTL_080 = 7;    // DEFb: bit number for value: 0x80
	localparam WREVTL_100 = 8;    // DEFb: bit number for value: 0x100
	localparam WREVTL_200 = 9;    // DEFb: bit number for value: 0x200
	localparam WREVTL_400 = 10;    // DEFb: bit number for value: 0x400
	localparam WF_SAMP_RD_RST = 11;    // DEFb: bit number for value: 0x800
	localparam WF_SAMP_WR_RST = 12;    // DEFb: bit number for value: 0x1000
	localparam WF_SAMP_CONTIN = 13;    // DEFb: bit number for value: 0x2000
	localparam WF_SAMP_SYNC = 14;    // DEFb: bit number for value: 0x4000
	localparam STAT_STATUS = 1023;    // DEFp 0x3ff
`define DEF_STAT_STATUS 1
	localparam STAT_FPGA_ID = 7168;    // DEFp 0x1c00
`define DEF_STAT_FPGA_ID 1
	localparam STAT_UNUSED = 8192;    // DEFp 0x2000
`define DEF_STAT_UNUSED 1
	localparam STAT_DNA_DATA = 14;    // DEFb: bit number for value: 0x4000
	localparam STAT_OVFL = 15;    // DEFb: bit number for value: 0x8000
	localparam CTRL_SER_NONE = 0;    // DEFp 0x0
//`define DEF_CTRL_SER_NONE
	localparam CTRL_SER_DNA = 1;    // DEFp 0x1
`define DEF_CTRL_SER_DNA 1
	localparam CTRL_SER_ATTN = 2;    // DEFp 0x2
`define DEF_CTRL_SER_ATTN 1
	localparam CTRL_SER_GPS = 3;    // DEFp 0x3
`define DEF_CTRL_SER_GPS 1
	localparam CTRL_SER_MASK = 3;    // DEFp 0x3
`define DEF_CTRL_SER_MASK 1
	localparam CTRL_SER_LE_CSN = 2;    // DEFb: bit number for value: 0x4
	localparam CTRL_SER_CLK = 3;    // DEFb: bit number for value: 0x8
	localparam CTRL_SER_DATA = 4;    // DEFb: bit number for value: 0x10
	localparam CTRL_STEN = 5;    // DEFb: bit number for value: 0x20
	localparam CTRL_DEBUG1 = 6;    // DEFb: bit number for value: 0x40
	localparam CTRL_DEBUG2 = 7;    // DEFb: bit number for value: 0x80
	localparam CTRL_OSC_DIS = 8;    // DEFb: bit number for value: 0x100
	localparam CTRL_EEPROM_WP = 9;    // DEFb: bit number for value: 0x200
	localparam CTRL_USE_GEN = 10;    // DEFb: bit number for value: 0x400
	localparam CTRL_CMD_READY = 11;    // DEFb: bit number for value: 0x800
	localparam CTRL_SND_INTR = 12;    // DEFb: bit number for value: 0x1000
	localparam CTRL_GPS_CLK_EN = 14;    // DEFb: bit number for value: 0x4000
	localparam CTRL_8000 = 15;    // DEFb: bit number for value: 0x8000
	localparam CTRL_UNUSED_OUT = 9;    // DEFb: bit number for value: 0x200


// from verilog/kiwi.inline.vh

`include "kiwi.cfg.vh"

// Done this way because make_proj.tcl batch script modifies kiwi.cfg.vh for each build mode (e.g. rx4wf4)

localparam V_RX_CHANS = (RX_CFG == 44)? 4 : ((RX_CFG == 82)? 8 : ((RX_CFG == 33)? 3 : ((RX_CFG == 14)? 14 : ((RX_CFG == 1)? 1 : 0))));
localparam V_WF_CHANS = (RX_CFG == 44)? 4 : ((RX_CFG == 82)? 2 : ((RX_CFG == 33)? 3 : ((RX_CFG == 14)?  0 : ((RX_CFG == 1)? 1 : 0))));

localparam V_GPS_CHANS = (RX_CFG == 44)? GPS_MAX_CHANS : ((RX_CFG == 82)? GPS_MAX_CHANS : ((RX_CFG == 33)? GPS_MAX_CHANS : ((RX_CFG == 14)?  GPS_RX14_CHANS : ((RX_CFG == 1)?  GPS_MAX_CHANS : 0))));

localparam RXBUF_SIZE = (RX_CFG == 44)? RXBUF_SIZE_44 : ((RX_CFG == 82)? RXBUF_SIZE_82 : ((RX_CFG == 33)? RXBUF_SIZE_33 : ((RX_CFG == 14)? RXBUF_SIZE_14 : ((RX_CFG == 1)? RXBUF_SIZE_WB : 0))));
localparam RXBUF_LARGE = (RX_CFG == 44)? RXBUF_LARGE_44 : ((RX_CFG == 82)? RXBUF_LARGE_82 : ((RX_CFG == 33)? RXBUF_LARGE_33 : ((RX_CFG == 14)? RXBUF_LARGE_14 : ((RX_CFG == 1)? RXBUF_LARGE_WB : 0))));

localparam RX1_DECIM = (RX_CFG == 33)? RX1_WIDE_DECIM : ((RX_CFG == 1)? RX1_WB_DECIM : RX1_STD_DECIM);
localparam RX2_DECIM = (RX_CFG == 33)? RX2_WIDE_DECIM : ((RX_CFG == 1)? RX2_WB_DECIM : RX2_STD_DECIM);

localparam FPGA_ID = (RX_CFG == 44)? FPGA_ID_RX4_WF4 : ((RX_CFG == 82)? FPGA_ID_RX8_WF2 : ((RX_CFG == 33)? FPGA_ID_RX3_WF3 : ((RX_CFG == 14)? FPGA_ID_RX14_WF0 : ((RX_CFG == 1)? FPGA_ID_WB : FPGA_ID_OTHER))));

// rst[2:1]
localparam LOAD = 1;
localparam RUN = 2;

function integer assert_cond(input integer cond);
	begin
		if (cond == 0) begin
			$display("assertion failed");
			$finish(1);
			assert_cond = 0;
		end else
		begin
			assert_cond = 1;
		end
	end 
endfunction

function integer assert_zero(input integer cond);
	begin
		if (cond != 0) begin
			$display("assertion failed");
			$finish(1);
			assert_zero = 0;
		end else
		begin
			assert_zero = 1;
		end
	end 
endfunction

// valid only when value is power of 2
function integer clog2(input integer value);
	begin
		if (value <= 1) begin
			clog2 = 1;
		end else
		begin
			value = value-1;
			for (clog2=0; value>0; clog2=clog2+1)
				value = value >> 1;
		end
	end 
endfunction

function integer max(input integer v1, input integer v2);
	begin
		if (v1 >= v2) begin
			max = v1;
		end else
			max = v2;
	end 
endfunction

function integer min(input integer v1, input integer v2);
	begin
		if (v1 <= v2) begin
			min = v1;
		end else
			min = v2;
	end 
endfunction
