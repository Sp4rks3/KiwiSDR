
// Copyright (c) 2014-2025 John Seamons, ZL4VO/KF6VO

				// configuration
	
        #if USE_OTHER
                DEFc    RX_CFG          0
        #else
                // value set here used when building using Vivado
                DEFc    RX_CFG          44
              //DEFc    RX_CFG          82
              //DEFc    RX_CFG          33
              //DEFc    RX_CFG          14
              //DEFc    RX_CFG          1

                DEFp	NUM_CMDS_OTHER  0
        #endif

            #if RX_CFG
				DEFh	USE_SDR	        1
				DEFh    USE_24K_WIDE    0
				DEFh	USE_GPS	        1
			#else
				DEFh	USE_SDR	        0
				DEFh	USE_GPS	        0
			#endif


; ============================================================================

				// options

				DEFh    ARTIX_7A35      1
				DEFh    ZYNQ_7007       0
				
				DEFp	ADC_BITS		14
				DEFp	DEFAULT_NSYNC	2       // bits in synchronizers

                // defaults
                DEFh    USE_OPTIONAL    1
                DEFh    USE_WB          0
                DEFh    USE_RX_CICF     1

                #if RX_CFG == 44
                #elif RX_CFG == 82
                #elif RX_CFG == 33
                #elif RX_CFG == 14
                #elif RX_CFG == 1
                    DEFh    USE_WB          1
                    DEFh    USE_RX_CICF     0
                    DEFh    WB_RATE         72      // 72 108 144 192 204 240 300
                #elif RX_CFG == 0
                #else
                    #error "bad RX_CFG value"
                #endif
			
			#if USE_OPTIONAL
                DEFh	USE_LOGGER		1
				DEFh	USE_CPU_CTR		1
				DEFh	USE_GEN			1       // needed by KiwiSDR 2+ self test
			#endif

				DEFh	USE_DEBUG		1
                DEFh	USE_RX_SEQ		0		// due to out-of-brams w/ rx4 config
				
				DEFh	USE_VIVADO		1
				DEFh	SERIES_7        1
				DEFh	SPI_PUMP_CHECK	0
				DEFh	STACK_CHECK		0
				DEFh	SND_SEQ_CHECK	0
				DEFh    SND_TIMING_CK   0
				
				DEFp    FPGA_ID_RX4_WF4     3'd5
				DEFp    FPGA_ID_RX8_WF2     3'd3
				DEFp    FPGA_ID_RX3_WF3     3'd4
				DEFp    FPGA_ID_RX14_WF0    3'd2
				DEFp    FPGA_ID_WB          3'd1
				DEFp    FPGA_ID_OTHER       3'd0

				DEFp    NUM_CMDS_BASE   13

			#if USE_SDR
				DEFp    NUM_CMDS_SDR    15
			#else
				DEFp    NUM_CMDS_SDR    0
			#endif

			#if USE_GPS
				DEFp	NUM_CMDS_GPS    17
			#else
				DEFp	NUM_CMDS_GPS    0
			#endif

                DEFp	NUM_CMDS		NUM_CMDS_BASE + NUM_CMDS_SDR + NUM_CMDS_GPS + NUM_CMDS_OTHER


; ============================================================================

				// SPI
				DEFh	SPI_32			1
				DEFp    SPIBUF_W        2048                // limited by use of single 2K x 16 (36 kb) BRAM in host.v
				DEFp    SPIBUF_WA       SPIBUF_W - 2        // actual, leaving room for 4B SPI_ST given SPI_32 cfg
				DEFp    SPIBUF_B        SPIBUF_W * 2


; ============================================================================

				// rx
                DEFp    N_SND_RATES     2

                DEFp    SND_RATE_WB     12000
                DEFp    SND_RATE_WB_I   0

				// 12k/20.25k sample rates chosen to be integer multiples of WSPR 375 Hz sample rate
			#if USE_RX_CICF
				DEFp	RX1_WB_DECIM    926
				DEFp	RX2_WB_DECIM    3			// 926*3 = 2778, 66.6666M/2778 = 23998.056 Hz (-1.944) /2 = 11999.028 (-0.972)
				
				DEFp	RX1_WIDE_DECIM  823
				DEFp	RX2_WIDE_DECIM  2			// 823*2 = 1646, 66.6666M/1646 = 40502.187 Hz (+2.187) /2 = 20251.094 (+1.094)

				DEFp	RX1_STD_DECIM   926
				DEFp	RX2_STD_DECIM   3			// 926*3 = 2778, 66.6666M/2778 = 23998.056 Hz (-1.944) /2 = 11999.028 (-0.972)
				
				DEFh    CICF_DECIM_BY_2 2
			#else
			
			 #if USE_WB

			  #if WB_RATE == 72
				DEFp	RX1_WB_DECIM    926         // 926*6 = 5556
				DEFp	RX2_WB_DECIM    6
				DEFp    V_WB_BUF_CHANS  0 + 6

			  #elif WB_RATE == 108
				DEFp	RX1_WB_DECIM    617         // 617*9 = 5553
				DEFp	RX2_WB_DECIM    9
				DEFp    V_WB_BUF_CHANS  0 + 9

			  #elif WB_RATE == 144
				DEFp	RX1_WB_DECIM    463         // 463*12 = 5556
				DEFp	RX2_WB_DECIM    12
				DEFp    V_WB_BUF_CHANS  0 + 12

			  #elif WB_RATE == 192
				DEFp	RX1_WB_DECIM    347         // 347*16 = 5552, +7.673 Hz, 639 ppm
				DEFp	RX2_WB_DECIM    16
                DEFp    V_WB_BUF_CHANS  0 + 16

			  #elif WB_RATE == 204
				DEFp	RX1_WB_DECIM    327         // 327*17 = 5559, -7.447 Hz, 621 ppm
				DEFp	RX2_WB_DECIM    17
                DEFp    V_WB_BUF_CHANS  0 + 17

			  #elif WB_RATE == 240
				DEFp	RX1_WB_DECIM    278         // 278*20 = 5560
				DEFp	RX2_WB_DECIM    20
                DEFp    V_WB_BUF_CHANS  0 + 20

			  #elif WB_RATE == 300
				DEFp	RX1_WB_DECIM    222         // 222*25 = 5550, 12.000 Hz, 999 ppm
				DEFp	RX2_WB_DECIM    25
                DEFp    V_WB_BUF_CHANS  0 + 25
			  #else
			    #error
			  #endif

			 #endif  // USE_WB
				
			 #if USE_24K_WIDE
				DEFp	RX1_WIDE_DECIM  463
				DEFp	RX2_WIDE_DECIM  6			// 463*6 = 2778, 66.6666M/2778 = 23998.056 Hz (-1.944)
			 #else
				DEFp	RX1_WIDE_DECIM  823
				DEFp	RX2_WIDE_DECIM  4			// 823*4 = 3292, 66.6666M/3292 = 20251.094 Hz (+1.094)
			 #endif
				
				// half as much error as below, but don't want to change status quo
			 #if USE_WB
				DEFp	RX1_STD_DECIM   RX1_WB_DECIM
				DEFp	RX2_STD_DECIM   RX2_WB_DECIM
			 #else
                //DEFp	RX1_STD_DECIM   926
                //DEFp	RX2_STD_DECIM   6			// 926*6 = 5556, 66.6666M/5556 = 11999.028 Hz (-0.972)
				DEFp	RX1_STD_DECIM   505
				DEFp	RX2_STD_DECIM   11			// 505*11 = 5555, 66.6666M/5555 = 12001.188 Hz (+1.188)
             #endif

				DEFh    CICF_DECIM_BY_2 1

            #endif  // !USE_RX_CICF
            
			 #if USE_24K_WIDE
                DEFp    MAX_SND_RATE    24000
                DEFp    SND_RATE_3CH    24000
                DEFp    SND_RATE_3CH_I  1
			 #else
                DEFp    MAX_SND_RATE    20250
                DEFp    SND_RATE_3CH    20250
                DEFp    SND_RATE_3CH_I  1
             #endif
                DEFp    MIN_SND_RATE    12000

                DEFp    SND_RATE_4CH    12000
                DEFp    SND_RATE_4CH_I  0
                DEFp    SND_RATE_8CH    12000
                DEFp    SND_RATE_8CH_I  0
                DEFp    SND_RATE_14CH   12000
                DEFp    SND_RATE_14CH_I 0

                DEFp    RX_DECIM_3CH    RX1_WIDE_DECIM * RX2_WIDE_DECIM * CICF_DECIM_BY_2
                DEFp    RX_DECIM_4CH    RX1_STD_DECIM  * RX2_STD_DECIM  * CICF_DECIM_BY_2
                DEFp    RX_DECIM_8CH    RX1_STD_DECIM  * RX2_STD_DECIM  * CICF_DECIM_BY_2
                DEFp    RX_DECIM_14CH   RX1_STD_DECIM  * RX2_STD_DECIM  * CICF_DECIM_BY_2
                DEFp    RX_DECIM_WB     RX1_WB_DECIM   * RX2_WB_DECIM   * CICF_DECIM_BY_2

                DEFp    RXBUF_SIZE_44    8192       // given  8k x 16b audio buffer in receiver.v
                DEFp    RXBUF_SIZE_33   16384       // given 16k x 16b audio buffer in receiver.v
                DEFp    RXBUF_SIZE_82   16384       // given 16k x 16b audio buffer in receiver.v
                DEFp    RXBUF_SIZE_14   32768       // given 32k x 16b audio buffer in receiver.v
                DEFp    RXBUF_SIZE_WB   32768       // given 32k x 16b audio buffer in receiver.v

                DEFp    RXBUF_LARGE_44      0
                DEFp    RXBUF_LARGE_33      1
                DEFp    RXBUF_LARGE_82      1
                DEFp    RXBUF_LARGE_14      2
                DEFp    RXBUF_LARGE_WB      2

                // for SPIBUF_W = 2048, RX_CHANS = 3, => nrx_samps = 226
			    // 1/(24000/nrx_samps) = interrupt every 9.4 ms / 118 Hz
                // for RXBUF_SIZE_3x = 16384 => nrx_bufs = 8

                // for SPIBUF_W = 2048, RX_CHANS = 3, => nrx_samps = 226
			    // 1/(20250/nrx_samps) = interrupt every 11.2 ms / 106 Hz
                // for RXBUF_SIZE_3x = 16384 => nrx_bufs = 8

                // for SPIBUF_W = 2048, RX_CHANS = 4, => nrx_samps = 170
			    // 1/(12000/nrx_samps) = interrupt every 14 ms / 71 Hz
                // for RXBUF_SIZE_4x = 8192 => nrx_bufs = 4

                // for SPIBUF_W = 2048, RX_CHANS = 8, => nrx_samps = 85
			    // 1/(12000/nrx_samps) = interrupt every 7 ms / 141 Hz
                // for RXBUF_SIZE_8x = 16384 => nrx_bufs = 8

                // for SPIBUF_W = 2048, RX_CHANS = 14, => nrx_samps = 48
			    // 1/(12000/nrx_samps) = interrupt every 4 ms / 250 Hz
                // for RXBUF_SIZE_14 = 32768 => nrx_bufs = 16

				DEFh	USE_RX_CIC24	0

			#if USE_RX_CIC24
				DEFp	RX1_BITS		24
				DEFp	RX2_BITS		23
			#else
				DEFp	RX1_BITS		22
				DEFp	RX2_BITS		18
			#endif
				DEFp	RXO_BITS		24

				DEFp	RX1_STAGES		3
				DEFp	RX2_STAGES		5


; ============================================================================

				// waterfall
				DEFh	USE_WF_CIC24	1
				DEFh	USE_WF_MEM24	0

				DEFp	WF1_STAGES		5
				DEFp	WF2_STAGES		5
				
			#if USE_WF_CIC24
				DEFp	WF1_BITS		24
				DEFp	WF2_BITS		24
			#else
				DEFp	WF1_BITS		16
				DEFp	WF2_BITS		16
			#endif
			
			#if USE_WF_MEM24
				DEFp	WFO_BITS		24
			#else
				DEFp	WFO_BITS		16
			#endif
			
				DEFp	WF_1CIC_MAXD	8192
				DEFp	WF_2CIC_MAXD	0			// to keep Vivado happy


; ============================================================================

				// gps
				DEFp    GPS_MAX_CHANS   12          // limited by ipcore_bram_gps_4k_12b
                DEFp	GPS_RX14_CHANS  10          // rx14: need more logic cells for USE_RX_CICF

				//DEFp    GPS_INTEG_BITS  16          // width of EPL I/Q integrators
				//DEFp    GPS_INTEG_BITS  18          // width of EPL I/Q integrators
				DEFp    GPS_INTEG_BITS  20          // width of EPL I/Q integrators
				
				DEFp    GPS_REPL_BITS   18          // width of clock replicas
				DEFp	MAX_NAV_BITS	128

			#if STACK_CHECK
			    DEFp    GPS_RPT         8
			#else
			    DEFp    GPS_RPT         32
			#endif
			
                DEFp    GPS_SAMPS       SPIBUF_W - 4    // leave room for SPI_ST

				DEFp	GPS_IQ_SAMPS    255             // leave room for SPI_ST
				DEFp	GPS_IQ_SAMPS_W  GPS_IQ_SAMPS * 4    // *2 = IQ, *2 = 2 words each

				DEFp	L1_CODEBITS     10
				DEFp	L1_CODELEN      1023

				DEFp    E1B_MODE        0x800
				DEFp	E1B_CODEBITS    12
				DEFp	E1B_CODELEN     4092            // in bytes
				DEFp	E1B_CODE_XFERS  1 << E1B_CODEBITS / SPIBUF_WA
				DEFp	E1B_CODE_LOOP   E1B_CODELEN / E1B_CODE_XFERS - 2    // in words


; ============================================================================

                // e_cpu I/O
                // NB: op[10:0] (0x400 max) because op[11] is used for further decoding

				// read reg (rdReg & op[10:0], one hot)
				// always pushes {16'b0, par} or 32'b0 for *_SRQ which use a subsequent rdBitN insn

				// these 3 must be in these bit positions: see gps.v
				DEFb	GET_CHAN_IQ		0x001
				DEFb	GET_SRQ			0x002
				DEFb	GET_SNAPSHOT	0x004
				
				DEFb	HOST_RX			0x008
				DEFb	GET_RX_SRQ		0x010
				DEFp	GET_REG_NO      0x0c0   // op[7:6]
				DEFp	REG_0		    0x000
				DEFp	REG_1		    0x040
				DEFp	REG_2		    0x080
				DEFp	REG_3		    0x0c0
				DEFb	GET_REG_MISC    0x100
				DEFp	GET_STATUS		GET_REG_MISC | REG_0
				DEFb	GET_CPU_CTR	    0x200
				DEFp	GET_CPU_CTR0    GET_CPU_CTR | REG_0
				DEFp	GET_CPU_CTR1    GET_CPU_CTR | REG_1
				DEFp	GET_CPU_CTR2    GET_CPU_CTR | REG_2
				DEFp	GET_CPU_CTR3    GET_CPU_CTR | REG_3
				DEFb	GET_ADC_CTR     0x400
				DEFp	GET_ADC_CTR0    GET_ADC_CTR | REG_0
				DEFp	GET_ADC_CTR1    GET_ADC_CTR | REG_1
	
				// write reg (wrReg & op[10:0], one hot)
				// always pops stack
				DEFb	HOST_TX			0x001
				DEFb	SET_GPS_MASK    0x002
			#if USE_GPS
				DEFb	SET_GPS_CHAN    0x004
				DEFb	SET_CG_NCO		0x008
				DEFb	SET_LO_NCO		0x010
				DEFb	SET_SAT			0x020
				DEFb	SET_E1B_CODE    0x040
				DEFb	SET_PAUSE		0x080
			#endif
			#if USE_SDR
				DEFb	SET_ADC_LVL     0x100
				DEFb	SET_CNT_MASK    0x200
			#endif
				DEFb	SET_CTRL		0x400
				
				// write reg (wrReg2 & op[10:0], one hot)
				// always pops stack
			#if USE_SDR
				DEFb	SET_REG		    0x008
				DEFp	SET_REG_NO	    0x007   // op[2:0]
				DEFp	SET_WF_CHAN		0x000
				DEFp	SET_WF_FREQ		0x001
				DEFp	SET_WF_DECIM	0x002
				DEFp	SET_WF_OFFSET	0x003
				DEFp	SET_WF_RST	    0x004
				DEFp    SET_REG_5       0x005
				DEFp	SET_REG_6       0x006
				DEFp	SET_REG_7	    0x007
				DEFb	SET_RX_CHAN		0x010
				DEFb	SET_RX_FREQ		0x020
				DEFb	FREQ_L          0x040
				DEFb	SET_RX_NSAMPS	0x080
				DEFb	SET_GEN_FREQ    0x200
				DEFb	SET_GEN_ATTN	0x400
			#endif
	
				// events (wrEvt & op[10:0], one hot)
				// no stack change
				DEFb	HOST_RST		0x001
				DEFb	HOST_RDY		0x002
				DEFb	GET_MEMORY		0x004   // causes ecpu data memory (with TOS pointer++) to SPI BRAM transfer
			#if USE_GPS
				DEFb	GPS_SAMPLER_RST	0x008
				DEFb	GET_GPS_SAMPLES	0x010	// data transfer goes directly to SPI BRAM
				DEFb	GET_LOG			0x020	// data transfer goes directly to SPI BRAM
				DEFb	PUT_LOG			0x040
				DEFb	LOG_RST			0x080
			#endif
				DEFb	WREVT_100		0x100
				DEFb	WREVT_200       0x200
				DEFb	WREVT_400       0x400

				// events (wrEvt2 & op[10:0], one hot)
				// no stack change
			#if USE_SDR
				DEFb	GET_RX_SAMP		0x001	// data transfer goes directly to SPI BRAM
				DEFb	RX_BUFFER_RST	0x002
				DEFb	RX_GET_BUF_CTR	0x004	// data transfer goes directly to SPI BRAM
				DEFb	WREVT2_008      0x008
				DEFb	GET_WF_SAMP_I	0x010	// data transfer goes directly to SPI BRAM
				DEFb	GET_WF_SAMP_Q	0x020	// data transfer goes directly to SPI BRAM
				DEFb	CLR_RX_OVFL		0x040
			#endif
				DEFb	FREEZE_TOS		0x080
				DEFb	CPU_CTR_CLR		0x100
				DEFb	CPU_CTR_ENA		0x200
				DEFb	CPU_CTR_DIS		0x400

				// events (wrEvtL & op[10:1], one hot)
				// no stack change
				// does automatic loop-to-aligned-pc as a performance improvement
				DEFp    WREVTL_LOOP_CTR0    0x000   // op[0] chooses which loop_ctr is used, just like for loop instruction
				DEFp    WREVTL_LOOP_CTR1    0x001
				DEFb	GET_MEMORY_LOOP     0x002   // causes ecpu data memory (with TOS pointer++) to SPI BRAM transfer
				DEFb	GET_RX_SAMP_LOOP    0x004   // data transfer goes directly to SPI BRAM
				DEFb	GET_WF_SAMP_Q_LOOP  0x008	// data transfer goes directly to SPI BRAM
				DEFb	GET_GPS_SAMPS_LOOP  0x010	// data transfer goes directly to SPI BRAM
				DEFb	WREVTL_020		    0x020
				DEFb	WREVTL_040		    0x040
				DEFb	WREVTL_080		    0x080
				DEFb	WREVTL_100		    0x100
				DEFb	WREVTL_200		    0x200
				DEFb	WREVTL_400		    0x400


				// SET_WF_RST
				DEFb	WF_SAMP_RD_RST	0x0800
				DEFb	WF_SAMP_WR_RST	0x1000
				DEFb	WF_SAMP_CONTIN	0x2000
				DEFb	WF_SAMP_SYNC	0x4000

				// GET_STATUS
				DEFp	STAT_STATUS     0x03ff
				DEFp	STAT_FPGA_ID	0x1c00
				DEFp	STAT_UNUSED     0x2000
				DEFb	STAT_DNA_DATA	0x4000
				DEFb	STAT_OVFL		0x8000

				// SET_CTRL
				DEFp	CTRL_SER_NONE   0x0000
				DEFp	CTRL_SER_DNA    0x0001
				DEFp	CTRL_SER_ATTN   0x0002
				DEFp	CTRL_SER_GPS    0x0003
				DEFp	CTRL_SER_MASK   0x0003
				DEFb	CTRL_SER_LE_CSN	0x0004
				DEFb	CTRL_SER_CLK	0x0008
				DEFb	CTRL_SER_DATA	0x0010

				DEFb	CTRL_STEN		0x0020
				
				DEFb	CTRL_DEBUG1		0x0040
				DEFb	CTRL_DEBUG2		0x0080

				DEFb	CTRL_OSC_DIS    0x0100
				DEFb	CTRL_EEPROM_WP  0x0200
				DEFb	CTRL_USE_GEN	0x0400
				DEFb	CTRL_CMD_READY	0x0800
				DEFb	CTRL_SND_INTR	0x1000
				DEFb	CTRL_GPS_CLK_EN 0x4000
				DEFb	CTRL_8000		0x8000

				DEFb	CTRL_UNUSED_OUT CTRL_EEPROM_WP
